LoadString Reg(4) String("canvas")
LoadString Reg(3) String(getElementById)
PropAccess Reg(1) Reg(2) Reg(3)
CallFunc Reg(0) Reg(1) String([4])
LoadString Reg(8) String("2d")
LoadString Reg(7) String(getContext)
PropAccess Reg(6) Reg(0) Reg(7)
CallFunc Reg(5) Reg(6) String([8])
LoadString Reg(10) String(height)
PropAccess Reg(9) Reg(0) Reg(10)
LoadString Reg(12) String(width)
PropAccess Reg(11) Reg(0) Reg(12)
LoadNum Reg(13) ShortNum(50)
LoadNum Reg(14) ShortNum(40)
Div Reg(15) Reg(9) Reg(14)
CallBytecodeFunc LongNum(476) String([])
Copy Reg(18) Reg(255)
Copy Reg(19) Reg(254)
LoadNum Reg(20) ShortNum(2)
LoadNum Reg(21) ShortNum(3)
LoadNum Reg(25) ShortNum(2)
Div Reg(24) Reg(13) Reg(25)
LoadNum Reg(27) ShortNum(2)
Div Reg(26) Reg(14) Reg(27)
LoadArray Reg(23) String([24, 26, 20])
LoadNum Reg(31) ShortNum(2)
Div Reg(30) Reg(13) Reg(31)
Add Reg(29) Reg(30) Reg(254)
LoadNum Reg(33) ShortNum(2)
Div Reg(32) Reg(14) Reg(33)
LoadArray Reg(28) String([29, 32, 20])
LoadNum Reg(37) ShortNum(2)
Div Reg(36) Reg(13) Reg(37)
LoadNum Reg(38) ShortNum(2)
Add Reg(35) Reg(36) Reg(38)
LoadNum Reg(40) ShortNum(2)
Div Reg(39) Reg(14) Reg(40)
LoadArray Reg(34) String([35, 39, 20])
LoadArray Reg(22) String([23, 28, 34])
Copy Reg(41) Reg(255)
Copy Reg(42) Reg(20)
LoadNum Reg(43) ShortNum(100)
LoadString Reg(48) String("keydown")
LoadNum Reg(50) ShortNum(0)
LoadString Reg(47) String(addEventListener)
PropAccess Reg(45) Reg(46) Reg(47)
CallFunc Reg(45) Reg(45) String([48, 49, 50])
CallBytecodeFunc LongNum(1364) String([])
Exit
LoadString Reg(27) String(random)
PropAccess Reg(25) Reg(26) Reg(27)
CallFunc Reg(24) Reg(25) String([])
Mul Reg(23) Reg(24) Reg(17)
Add Reg(22) Reg(23) Reg(16)
LoadString Reg(21) String(floor)
PropAccess Reg(19) Reg(20) Reg(21)
CallFunc Reg(18) Reg(19) String([22])
ReturnBytecodeFunc String([18])


CompGreaterThanEqual Reg(19) Reg(16) Reg(17)
JumpCond Reg(19) BranchAddr(LabelAddrToken { label: 0 })
Copy Reg(18) Reg(16)
Jump BranchAddr(LabelAddrToken { label: 1 })

label_0:
Copy Reg(18) Reg(17)

label_1:
ReturnBytecodeFunc String([18])


LoadString Reg(20) String(beginPath)
PropAccess Reg(19) Reg(5) Reg(20)
CallFunc Reg(19) Reg(19) String([])
Mul Reg(24) Reg(16) Reg(15)
Add Reg(23) Reg(24) Reg(254)
Mul Reg(26) Reg(17) Reg(15)
Add Reg(25) Reg(26) Reg(254)
Minus Reg(27) Reg(15) Reg(254)
Minus Reg(28) Reg(15) Reg(254)
LoadString Reg(22) String(rect)
PropAccess Reg(21) Reg(5) Reg(22)
CallFunc Reg(21) Reg(21) String([23, 25, 27, 28])
LoadString Reg(30) String(fillStyle)
PropAccess Reg(29) Reg(5) Reg(30)
Copy Reg(29) Reg(18)
LoadString Reg(32) String(fill)
PropAccess Reg(31) Reg(5) Reg(32)
CallFunc Reg(31) Reg(31) String([])
LoadString Reg(34) String(closePath)
PropAccess Reg(33) Reg(5) Reg(34)
CallFunc Reg(33) Reg(33) String([])
ReturnBytecodeFunc String([])


Minus Reg(18) Reg(13) Reg(254)
CallBytecodeFunc LongNum(273) String([255, 18])
Minus Reg(19) Reg(14) Reg(254)
CallBytecodeFunc LongNum(273) String([255, 19])
ReturnBytecodeFunc String([])


PropAccess Reg(45) Reg(5) Reg(20)
CallFunc Reg(45) Reg(45) String([])
Copy Reg(46) Reg(15)

label_2:
CompLessThanEqual Reg(47) Reg(46) Reg(11)
JumpCond Reg(47) BranchAddr(LabelAddrToken { label: 3 })
LoadFloatNum Reg(52) Float(0.5)
Add Reg(51) Reg(52) Reg(46)
LoadString Reg(50) String(moveTo)
PropAccess Reg(49) Reg(5) Reg(50)
CallFunc Reg(49) Reg(49) String([51, 255])
Add Reg(55) Reg(52) Reg(46)
LoadString Reg(54) String(lineTo)
PropAccess Reg(53) Reg(5) Reg(54)
CallFunc Reg(53) Reg(53) String([55, 9])
Add Reg(46) Reg(46) Reg(15)
Jump BranchAddr(LabelAddrToken { label: 2 })

label_3:
Copy Reg(56) Reg(15)

label_4:
CompLessThanEqual Reg(57) Reg(56) Reg(9)
JumpCond Reg(57) BranchAddr(LabelAddrToken { label: 5 })
Add Reg(60) Reg(52) Reg(56)
PropAccess Reg(59) Reg(5) Reg(50)
CallFunc Reg(59) Reg(59) String([255, 60])
Add Reg(62) Reg(52) Reg(56)
PropAccess Reg(61) Reg(5) Reg(54)
CallFunc Reg(61) Reg(61) String([11, 62])
Add Reg(56) Reg(56) Reg(15)
Jump BranchAddr(LabelAddrToken { label: 4 })

label_5:
LoadString Reg(64) String(strokeStyle)
PropAccess Reg(63) Reg(5) Reg(64)
LoadString Reg(63) String("grey")
LoadString Reg(66) String(stroke)
PropAccess Reg(65) Reg(5) Reg(66)
CallFunc Reg(65) Reg(65) String([])
PropAccess Reg(67) Reg(5) Reg(34)
CallFunc Reg(67) Reg(67) String([])
ReturnBytecodeFunc String([])


PropAccess Reg(47) Reg(0) Reg(12)
PropAccess Reg(48) Reg(0) Reg(10)
LoadString Reg(46) String(clearRect)
PropAccess Reg(45) Reg(5) Reg(46)
CallFunc Reg(45) Reg(45) String([255, 255, 47, 48])
CallBytecodeFunc LongNum(510) String([])
Copy Reg(49) Reg(255)

label_6:
LoadString Reg(52) String(length)
PropAccess Reg(51) Reg(22) Reg(52)
CompLessThan Reg(50) Reg(49) Reg(51)
JumpCond Reg(50) BranchAddr(LabelAddrToken { label: 7 })
LoadString Reg(55) String(i)
PropAccess Reg(54) Reg(22) Reg(55)
PropAccess Reg(56) Reg(54) Reg(255)
PropAccess Reg(57) Reg(54) Reg(254)
LoadString Reg(58) String("orange")
CallBytecodeFunc LongNum(352) String([56, 57, 58])
Add Reg(49) Reg(49) Reg(254)
Jump BranchAddr(LabelAddrToken { label: 6 })

label_7:
LoadString Reg(59) String("green")
CallBytecodeFunc LongNum(352) String([16, 17, 59])
JumpCond Reg(44) BranchAddr(LabelAddrToken { label: 8 })
CallFunc Reg(60) Reg(60) String([61])

label_8:
ReturnBytecodeFunc String([])


Minus Reg(46) Reg(255) Reg(254)
LoadArray Reg(45) String([255, 255, 46, 254])
Minus Reg(48) Reg(255) Reg(254)
LoadArray Reg(47) String([48, 254, 255, 255])
Copy Reg(49) Reg(42)
Copy Reg(50) Reg(253)
Copy Reg(51) Reg(255)

label_10:
PropAccess Reg(53) Reg(22) Reg(52)
CompLessThan Reg(52) Reg(51) Reg(53)
JumpCond Reg(52) BranchAddr(LabelAddrToken { label: 11 })
PropAccess Reg(55) Reg(22) Reg(55)
LoadNum Reg(58) ShortNum(2)
PropAccess Reg(57) Reg(55) Reg(58)
CompNotEqual Reg(56) Reg(57) Reg(49)
JumpCond Reg(56) BranchAddr(LabelAddrToken { label: 12 })
LoadNum Reg(60) ShortNum(2)
PropAccess Reg(59) Reg(55) Reg(60)
LoadNum Reg(63) ShortNum(2)
PropAccess Reg(49) Reg(55) Reg(63)
LoadArray Reg(61) String([49, 62])
PropAccess Reg(59) Reg(61) Reg(255)

label_12:
PropAccess Reg(65) Reg(55) Reg(255)
LoadNum Reg(68) ShortNum(2)
PropAccess Reg(67) Reg(55) Reg(68)
PropAccess Reg(66) Reg(45) Reg(67)
Add Reg(64) Reg(65) Reg(66)
PropAccess Reg(70) Reg(55) Reg(254)
LoadNum Reg(73) ShortNum(2)
PropAccess Reg(72) Reg(55) Reg(73)
PropAccess Reg(71) Reg(47) Reg(72)
Add Reg(69) Reg(70) Reg(71)
CompEqual Reg(74) Reg(64) Reg(16)
JumpCondNeg Reg(74) BranchAddr(LabelAddrToken { label: 14 })
CompEqual Reg(74) Reg(69) Reg(17)

label_14:
JumpCond Reg(74) BranchAddr(LabelAddrToken { label: 15 })
LoadArray Reg(78) String([])
PropAccess Reg(81) Reg(22) Reg(52)
Minus Reg(80) Reg(81) Reg(254)
PropAccess Reg(79) Reg(22) Reg(80)
LoadString Reg(77) String(assign)
PropAccess Reg(75) Reg(76) Reg(77)
CallFunc Reg(50) Reg(75) String([78, 79])
CallBytecodeFunc LongNum(476) String([])
Add Reg(41) Reg(41) Reg(254)

label_15:
Copy Reg(82) Reg(255)
Copy Reg(83) Reg(255)

label_17:
PropAccess Reg(85) Reg(22) Reg(52)
CompLessThan Reg(84) Reg(83) Reg(85)
JumpCond Reg(84) BranchAddr(LabelAddrToken { label: 18 })
LoadString Reg(88) String(ci)
PropAccess Reg(87) Reg(22) Reg(88)
PropAccess Reg(90) Reg(87) Reg(255)
PropAccess Reg(91) Reg(55) Reg(255)
CompStrictEqual Reg(89) Reg(90) Reg(91)
JumpCondNeg Reg(89) BranchAddr(LabelAddrToken { label: 19 })
PropAccess Reg(92) Reg(87) Reg(254)
PropAccess Reg(93) Reg(55) Reg(254)
CompStrictEqual Reg(89) Reg(92) Reg(93)

label_19:
JumpCond Reg(89) BranchAddr(LabelAddrToken { label: 20 })
Add Reg(82) Reg(82) Reg(254)

label_20:
Add Reg(83) Reg(83) Reg(254)
Jump BranchAddr(LabelAddrToken { label: 17 })

label_18:
CompLessThan Reg(94) Reg(64) Reg(255)
JumpCond Reg(94) BranchAddr(LabelAddrToken { label: 22 })
CompGreaterThanEqual Reg(94) Reg(64) Reg(13)

label_22:
JumpCond Reg(94) BranchAddr(LabelAddrToken { label: 23 })
CompLessThan Reg(94) Reg(69) Reg(255)

label_23:
JumpCond Reg(94) BranchAddr(LabelAddrToken { label: 24 })
CompGreaterThanEqual Reg(94) Reg(69) Reg(14)

label_24:
JumpCond Reg(94) BranchAddr(LabelAddrToken { label: 25 })
LoadNum Reg(95) ShortNum(2)
CompGreaterThanEqual Reg(94) Reg(82) Reg(95)

label_25:
JumpCond Reg(94) BranchAddr(LabelAddrToken { label: 26 })
LoadString Reg(99) String(location)
PropAccess Reg(97) Reg(98) Reg(99)
LoadString Reg(100) String(reload)
PropAccess Reg(96) Reg(97) Reg(100)
CallFunc Reg(96) Reg(96) String([])

label_26:
PropAccess Reg(101) Reg(22) Reg(55)
LoadNum Reg(103) ShortNum(2)
PropAccess Reg(102) Reg(55) Reg(103)
LoadArray Reg(101) String([64, 69, 102])
Add Reg(51) Reg(51) Reg(254)
Jump BranchAddr(LabelAddrToken { label: 10 })

label_11:
JumpCond Reg(50) BranchAddr(LabelAddrToken { label: 28 })
LoadString Reg(105) String(push)
PropAccess Reg(104) Reg(22) Reg(105)
CallFunc Reg(104) Reg(104) String([50])

label_28:
ReturnBytecodeFunc String([])


CallFunc Reg(44) Reg(45) String([46, 43])
CallBytecodeFunc LongNum(721) String([])
ReturnBytecodeFunc String([])


JumpCond Reg(44) BranchAddr(LabelAddrToken { label: 30 })
CallFunc Reg(45) Reg(45) String([44])
Copy Reg(44) Reg(253)
Jump BranchAddr(LabelAddrToken { label: 31 })

label_30:
CallBytecodeFunc LongNum(1364) String([])

label_31:
ReturnBytecodeFunc String([])


LoadString Reg(50) String(key)
PropAccess Reg(49) Reg(45) Reg(50)
LoadString Reg(51) String("ArrowLeft")
CompEqual Reg(48) Reg(49) Reg(51)
JumpCond Reg(48) BranchAddr(LabelAddrToken { label: 32 })
Copy Reg(47) Reg(20)
Copy Reg(46) Reg(21)
Jump BranchAddr(LabelAddrToken { label: 33 })

label_32:
PropAccess Reg(53) Reg(45) Reg(50)
LoadString Reg(54) String("ArrowRight")
CompEqual Reg(52) Reg(53) Reg(54)
JumpCond Reg(52) BranchAddr(LabelAddrToken { label: 34 })
Copy Reg(47) Reg(21)
Copy Reg(46) Reg(20)
Jump BranchAddr(LabelAddrToken { label: 35 })

label_34:
PropAccess Reg(56) Reg(45) Reg(50)
LoadString Reg(57) String("ArrowUp")
CompEqual Reg(55) Reg(56) Reg(57)
JumpCond Reg(55) BranchAddr(LabelAddrToken { label: 36 })
Copy Reg(47) Reg(18)
Copy Reg(46) Reg(19)
Jump BranchAddr(LabelAddrToken { label: 37 })

label_36:
PropAccess Reg(59) Reg(45) Reg(50)
LoadString Reg(60) String("ArrowDown")
CompEqual Reg(58) Reg(59) Reg(60)
JumpCond Reg(58) BranchAddr(LabelAddrToken { label: 38 })
Copy Reg(47) Reg(19)
Copy Reg(46) Reg(18)

label_38:

label_37:

label_35:

label_33:
Copy Reg(62) Reg(253)
CompStrictNotEqual Reg(61) Reg(46) Reg(62)
JumpCondNeg Reg(61) BranchAddr(LabelAddrToken { label: 40 })
CompNotEqual Reg(61) Reg(46) Reg(42)

label_40:
JumpCond Reg(61) BranchAddr(LabelAddrToken { label: 41 })
Copy Reg(42) Reg(47)
Jump BranchAddr(LabelAddrToken { label: 42 })

label_41:
PropAccess Reg(64) Reg(45) Reg(50)
LoadString Reg(65) String(" ")
CompEqual Reg(63) Reg(64) Reg(65)
JumpCond Reg(63) BranchAddr(LabelAddrToken { label: 43 })
CallBytecodeFunc LongNum(1382) String([])
Jump BranchAddr(LabelAddrToken { label: 44 })

label_43:
PropAccess Reg(67) Reg(45) Reg(50)
LoadString Reg(68) String("+")
CompEqual Reg(66) Reg(67) Reg(68)
JumpCond Reg(66) BranchAddr(LabelAddrToken { label: 45 })
LoadNum Reg(70) ShortNum(10)
Minus Reg(69) Reg(43) Reg(70)
LoadNum Reg(71) ShortNum(20)
CallBytecodeFunc LongNum(320) String([69, 71])
CallBytecodeFunc LongNum(1382) String([])
CallBytecodeFunc LongNum(1382) String([])

label_45:

label_44:

label_42:
ReturnBytecodeFunc String([])
